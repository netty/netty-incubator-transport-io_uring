name: Release

on:
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  prepare-release:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          ref: main_copy

      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: 8

      # Cache .m2/repository
      - uses: actions/cache@v2
        env:
          cache-name: release-cache-m2-repository
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-pr-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ env.cache-name }}-
            ${{ runner.os }}-pr-

      - name: Setup git configuration
        run: |
          git config --global user.email "netty-project-bot@users.noreply.github.com"
          git config --global user.name "Netty Project Bot"

      - name: Setup SSH for tagging
        run: |
          mkdir ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Prepare release with Maven
        run: |
          mvn -DpreparationGoals=clean release:prepare -B --file pom.xml -DskipTests=true
          mvn clean

      - name: Upload workspace
        uses: actions/upload-artifact@v2
        with:
          name: prepare-release-workspace
          path: ${{ github.workspace }}/**

  stage-release:
    runs-on: ubuntu-latest
    needs: prepare-release
    strategy:
      matrix:
        include:
          - setup: linux-x86_64
            docker-compose-build: "-f docker/docker-compose.centos-6.yaml -f docker/docker-compose.centos-6.18.yaml build"
            docker-compose-run: "-f docker/docker-compose.centos-6.yaml -f docker/docker-compose.centos-6.18.yaml run stage-release"
          - setup: linux-aarch64
            docker-compose-build: "-f docker/docker-compose.centos-7.yaml build"
            docker-compose-run: "-f docker/docker-compose.centos-7.yaml run cross-compile-aarch64-stage-release"
    name: stage-release-${{ matrix.setup }}
    steps:
      - name: Download release-workspace
        uses: actions/download-artifact@v2
        with:
          name: prepare-release-workspace
          path: ./prepare-release-workspace/

      - name: Create local staging directory
        run: mkdir -p ~/local-staging

      - name: Install expect
        run: apt-get update && apt-get -y install expect

      - name: Install gpg secret key
        run: |
          cat <(echo -e "${{ secrets.GPG_PRIVATE_KEY }}") | gpg --batch --import
          expect -c "spawn gpg --edit-key ${{ secrets.GPG_KEYNAME }}k trust quit; send \"5\ry\r\"; expect eof"
          gpg --list-secret-keys --keyid-format LONG

      # Enable caching of Docker layers
      - uses: satackey/action-docker-layer-caching@v0.0.11
        env:
          docker-cache-name: staging-${{ matrix.setup }}-cache-docker
        continue-on-error: true
        with:
          key: ${{ runner.os }}-staging-${{ env.docker-cache-name }}-{hash}
          restore-keys: |
            ${{ runner.os }}-staging-${{ env.docker-cache-name }}-

      - name: Build docker image
        working-directory: ./prepare-release-workspace/
        run: docker-compose ${{ matrix.docker-compose-build }}

      - name: Stage snapshots to local staging directory
        working-directory: ./prepare-release-workspace/
        env:
          GPG_KEYNAME: ${{ secrets.GPG_KEYNAME }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: docker-compose ${{ matrix.docker-compose-run }}

      - name: Upload local staging directory
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.setup }}-local-staging
          path: ~/local-staging

  deploy-staged-release:
    runs-on: ubuntu-18.04
    # Wait until we have staged everything
    needs: stage-release
    steps:
      - name: Download release-workspace
        uses: actions/download-artifact@v2
        with:
          name: prepare-release-workspace
          path: ./prepare-release-workspace/

      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: 8

      # Cache .m2/repository
      - uses: actions/cache@v2
        env:
          cache-name: deploy-staging-cache-m2-repository
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-deploy-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-deploy-${{ env.cache-name }}-
            ${{ runner.os }}-deploy-

      # Setup some env to re-use later.
      - name: Prepare enviroment variables
        run: |
          echo "LOCAL_STAGING_DIR=./local-staging" >> $GITHUB_ENV

      # Hardcode the staging artifacts that need to be downloaded.
      # These must match the matrix setups. There is currently no way to pull this out of the config.
      - name: Download linux-aarch64 staging directory
        uses: actions/download-artifact@v2
        with:
          name: linux-aarch64-local-staging
          path: ./linux-aarch64-local-staging

      - name: Download linux-x86_64 staging directory
        uses: actions/download-artifact@v2
        with:
          name: linux-x86_64-local-staging
          path: ./linux-x86_64-local-staging

      - name: Merge staging repositories
        run: |
          mkdir -p ./local-staging/deferred
          cat ./linux-aarch64-local-staging/deferred/.index >>  ./local-staging/deferred/.index
          cp -r ./linux-aarch64-local-staging/deferred/* ./local-staging/deferred/
          cat ./linux-x86_64-local-staging/deferred/.index >>  ./local-staging/deferred/.index
          cp -r ./linux-x86_64-local-staging/deferred/* ./local-staging/deferred/

      - uses: s4u/maven-settings-action@v2.2.0
        with:
          servers: |
            [{
              "id": "sonatype-nexus",
              "username": "${{ secrets.SONATYPE_USERNAME }}",
              "password": "${{ secrets.SONATYPE_PASSWORD }}"
            }]

      - name: Deploy local staged artifacts
        working-directory: ./prepare-release-workspace/
        run: mvn -B --file pom.xml org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged -DaltStagingDirectory=$LOCAL_STAGING_DIR